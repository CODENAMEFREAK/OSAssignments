STDOUT equ 1					;STDOUT constant defined. It is the value of the standard output file descriptor.
SYS_WRITE equ 4					;SYS_WRITE constant defined. It is the ID of the sys_write system call.

extern displayReturnValue32		;displayReturnValue32 is declared extern so that from assembly can invoke it.


section .text
	global _print32 			;_print is marked global so that from C code can call it.

	
;As per x86-32 bit calling convention the parameters are pushed in reverse order.
;So since the _print32( length , freakMessage).
;Then stack will be like
;						[	freakMessage	]	{new_ebp + 12}
;						[	length      	]	{new_ebp + 8} 4byte integer
;						[	return address	]	{new_ebp + 4} return address
;						[	old ebp			]	{new_ebp}
;						[					]	{ebp-4}


_print32:
	push ebp 					;Callee Rule. Push previous stack frame base pointer. Popped at the time of leaving the function, see last line.

	mov ebp,esp					;Callee Rule. setting up base of new stack frame so as to obtain our point of reference for accessing parameters and local variables.

	mov ecx,[ebp+12] 			;taking argument message. Since stack grows downward and arguments are at constant offsets away from the base pointer value.
	mov edx,[ebp+8] 			;taking argument length and arguments are at constant offsets away from the base pointer value.
	
	mov eax,SYS_WRITE			;
	mov ebx,STDOUT				;

	int 0x80					;make the system call.
	
	
	;at this point return value will be present in eax register.
	;Now Invoke C function

	push eax					;pushing eax before invoking function because eax contains the argument to be printed by C function.
	call displayReturnValue32	;Call the C function to display the return value.

	mov esp,ebp					;Restore Extended Stack pointer
	pop ebp						;Restore Extended Base pointer for the caller of _print32 as the caller is not expecting the calle to change the value of base pointer. See First line.

	
ret
